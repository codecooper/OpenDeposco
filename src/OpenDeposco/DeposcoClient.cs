//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("OpenDeposco.Tests")]
namespace OpenDeposco
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial interface IAddressValidationClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The response from the API indicates whether the address is valid or invalid.
        /// </summary>
        /// <remarks>
        /// The address is validated by either UPS or FedEx. If the address is invalid, then a list of suggested addresses is provided.
        /// </remarks>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeposcoResponse<AddressValidationResponse?>> ValidateAddressAsync(string code, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    internal partial class AddressValidationClient : DeposcoClientBase, IAddressValidationClient
    {
        private string _baseUrl = "https://api.deposco.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public AddressValidationClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The response from the API indicates whether the address is valid or invalid.
        /// </summary>
        /// <remarks>
        /// The address is validated by either UPS or FedEx. If the address is invalid, then a list of suggested addresses is provided.
        /// </remarks>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeposcoResponse<AddressValidationResponse?>> ValidateAddressAsync(string code, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/integration/{code}/addressvalidation");
            urlBuilder_.Replace("{code}", System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddressValidationResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new DeposcoResponse<AddressValidationResponse?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial interface IBulkClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the POST method to send an asynchronous bulk request to create and update multiple items or orders.
        /// </summary>
        /// <remarks>
        /// Each request should include either orders or items, but not both types of entities.
        /// <br/>A DocStoreDetail record is created in Deposco for the bulk request.DocStoreResponse records are created for each entity in the request.
        /// </remarks>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <param name="uniqueToken">Optionally enter your own ID to identify the bulk request. You can then check the status of the request by using the token</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeposcoResponse<MultistatusResponse?>> BulkUpsertItemsOrdersAsync(string code, BulkUpdateCollection body, string? uniqueToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the status of a bulk request by request ID
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <param name="requestID">ID of the bulk request to get the status of. This ID is returned in the href field of the response for the POST request.</param>
        /// <param name="includeSuccessDetails">Set to true to include details for entities that were successfully created or updated. The default value is false, which includes details only for entities that could not be created or updated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeposcoResponse<BulkUpdateResponseCollection?>> GetBulkStatusByRequestIdAsync(string code, string requestID, bool? includeSuccessDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the status of a bulk request by your own unique token
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <param name="token">If you included a unique token as a query parameter on the POST request, then enter the token.</param>
        /// <param name="includeSuccessDetails">Set to true to include details for entities that were successfully created or updated. The default value is false, which includes details only for entities that could not be created or updated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeposcoResponse<BulkUpdateResponseCollection?>> GetBulkStatusByTokenAsync(string code, string token, bool? includeSuccessDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    internal partial class BulkClient : DeposcoClientBase, IBulkClient
    {
        private string _baseUrl = "https://api.deposco.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public BulkClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the POST method to send an asynchronous bulk request to create and update multiple items or orders.
        /// </summary>
        /// <remarks>
        /// Each request should include either orders or items, but not both types of entities.
        /// <br/>A DocStoreDetail record is created in Deposco for the bulk request.DocStoreResponse records are created for each entity in the request.
        /// </remarks>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <param name="uniqueToken">Optionally enter your own ID to identify the bulk request. You can then check the status of the request by using the token</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeposcoResponse<MultistatusResponse?>> BulkUpsertItemsOrdersAsync(string code, BulkUpdateCollection body, string? uniqueToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/integration/{code}/bulk?");
            urlBuilder_.Replace("{code}", System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)));
            if (uniqueToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("uniqueToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(uniqueToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MultistatusResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new DeposcoResponse<MultistatusResponse?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the status of a bulk request by request ID
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <param name="requestID">ID of the bulk request to get the status of. This ID is returned in the href field of the response for the POST request.</param>
        /// <param name="includeSuccessDetails">Set to true to include details for entities that were successfully created or updated. The default value is false, which includes details only for entities that could not be created or updated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeposcoResponse<BulkUpdateResponseCollection?>> GetBulkStatusByRequestIdAsync(string code, string requestID, bool? includeSuccessDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            if (requestID == null)
                throw new System.ArgumentNullException("requestID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/integration/{code}/bulk/{requestID}/details?");
            urlBuilder_.Replace("{code}", System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{requestID}", System.Uri.EscapeDataString(ConvertToString(requestID, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeSuccessDetails != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeSuccessDetails") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeSuccessDetails, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkUpdateResponseCollection?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new DeposcoResponse<BulkUpdateResponseCollection?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the status of a bulk request by your own unique token
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <param name="token">If you included a unique token as a query parameter on the POST request, then enter the token.</param>
        /// <param name="includeSuccessDetails">Set to true to include details for entities that were successfully created or updated. The default value is false, which includes details only for entities that could not be created or updated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeposcoResponse<BulkUpdateResponseCollection?>> GetBulkStatusByTokenAsync(string code, string token, bool? includeSuccessDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            if (token == null)
                throw new System.ArgumentNullException("token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/integration/{code}/bulk/uniqueToken/{token}?");
            urlBuilder_.Replace("{code}", System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{token}", System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeSuccessDetails != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeSuccessDetails") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeSuccessDetails, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkUpdateResponseCollection?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new DeposcoResponse<BulkUpdateResponseCollection?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial interface IUserClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the PUT method to create a user with the user API.
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeposcoResponse<UserType?>> CreateUserAsync(string code, UserType? body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the POST method to update a user with the user API
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeposcoResponse<UserType?>> UpdateUserAsync(string code, UserType? body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the GET method to retrieve all active users with the user API
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeposcoResponse<UserCollection?>> GetUsersAsync(string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the GET method to retrieve a specific user with the user API
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <param name="username">Username of the user to retrieve</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeposcoResponse<UserType?>> GetUserAsync(string code, string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    internal partial class UserClient : DeposcoClientBase, IUserClient
    {
        private string _baseUrl = "https://api.deposco.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public UserClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the PUT method to create a user with the user API.
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeposcoResponse<UserType?>> CreateUserAsync(string code, UserType? body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/integration/{code}/users");
            urlBuilder_.Replace("{code}", System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserType?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new DeposcoResponse<UserType?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the POST method to update a user with the user API
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeposcoResponse<UserType?>> UpdateUserAsync(string code, UserType? body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/integration/{code}/users");
            urlBuilder_.Replace("{code}", System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserType?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new DeposcoResponse<UserType?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the GET method to retrieve all active users with the user API
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeposcoResponse<UserCollection?>> GetUsersAsync(string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/integration/{code}/users");
            urlBuilder_.Replace("{code}", System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserCollection?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new DeposcoResponse<UserCollection?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Use the GET method to retrieve a specific user with the user API
        /// </summary>
        /// <param name="code">Company code for your Deposco environment</param>
        /// <param name="username">Username of the user to retrieve</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeposcoResponse<UserType?>> GetUserAsync(string code, string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            if (username == null)
                throw new System.ArgumentNullException("username");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/integration/{code}/users/{username}");
            urlBuilder_.Replace("{code}", System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserType?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new DeposcoResponse<UserType?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class AddressType
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attention")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Attention { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Phone2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressLine1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string AddressLine1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressLine2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AddressLine2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressLine3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AddressLine3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressLine4")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AddressLine4 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stateProvinceCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string StateProvinceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string CountryCode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class AddressValidationOptionsType
    {

        [System.Text.Json.Serialization.JsonPropertyName("carrier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Carrier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("profileName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProfileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxSuggestedAddresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string MaxSuggestedAddresses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("streetLevelValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool StreetLevelValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("streetLevelValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool StreetLevelValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("streetLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? StreetLevel { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class AddressValidationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public AddressType Address { get; set; } = new AddressType();

        [System.Text.Json.Serialization.JsonPropertyName("addressValidationOptions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressValidationOptionsType AddressValidationOptions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class AddressValidationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quality")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Quality { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipVendor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipVendor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("suggestedAddresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<AddressType>? SuggestedAddresses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("suggestedAddressesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SuggestedAddressesSpecified { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BoxTypeType
    {

        [System.Text.Json.Serialization.JsonPropertyName("itemNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string ItemNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BulkUpdateCollection
    {

        [System.Text.Json.Serialization.JsonPropertyName("bulkUpdate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<BulkUpdateType>? BulkUpdate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bulkUpdateSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BulkUpdateSpecified { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BulkUpdateDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("entityNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string EntityNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Comment { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BulkUpdateResponseCollection
    {

        [System.Text.Json.Serialization.JsonPropertyName("bulkUpdate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<BulkUpdateResponseType>? BulkUpdate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bulkUpdateSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BulkUpdateSpecified { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BulkUpdateResponseType
    {

        [System.Text.Json.Serialization.JsonPropertyName("requestId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string RequestId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uniqueToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string UniqueToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("progress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Progress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("details")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BulkUpdateDetail> Details { get; set; } = new System.Collections.ObjectModel.Collection<BulkUpdateDetail>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BulkUpdateType
    {

        [System.Text.Json.Serialization.JsonPropertyName("order")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public OrderType Order { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ItemType Item { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CarrierSpecialServiceType
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipVendor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipVendor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayDeliveryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SaturdayDeliveryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayDeliveryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SaturdayDeliveryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayDelivery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SaturdayDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayPickupValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SaturdayPickupValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayPickupValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SaturdayPickupValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayPickup")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SaturdayPickup { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insideDeliveryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool InsideDeliveryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insideDeliveryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool InsideDeliveryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insideDelivery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? InsideDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pharmacyDeliveryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PharmacyDeliveryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pharmacyDeliveryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PharmacyDeliveryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pharmacyDelivery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PharmacyDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("printReturnLabelValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PrintReturnLabelValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("printReturnLabelValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PrintReturnLabelValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("printReturnLabel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PrintReturnLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brokerSelectOptionValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BrokerSelectOptionValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brokerSelectOptionValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BrokerSelectOptionValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brokerSelectOption")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? BrokerSelectOption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BatteryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BatteryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("battery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Battery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("liftgateDeliveryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool LiftgateDeliveryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("liftgateDeliveryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool LiftgateDeliveryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("liftgateDelivery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LiftgateDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnReceiptRequestedValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReturnReceiptRequestedValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnReceiptRequestedValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReturnReceiptRequestedValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnReceiptRequested")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ReturnReceiptRequested { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notificationPriorToDeliveryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool NotificationPriorToDeliveryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notificationPriorToDeliveryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool NotificationPriorToDeliveryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notificationPriorToDelivery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NotificationPriorToDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryMaterialValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int BatteryMaterialValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryMaterialValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BatteryMaterialValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryMaterial")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int BatteryMaterial { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryPackagingValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int BatteryPackagingValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryPackagingValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BatteryPackagingValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryPackaging")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int BatteryPackaging { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryRegulation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BatteryRegulation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("freightBookingConfirmationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FreightBookingConfirmationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exportComplianceStatement")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExportComplianceStatement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliverySignatureOptionValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DeliverySignatureOptionValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliverySignatureOptionValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DeliverySignatureOptionValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliverySignatureOption")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DeliverySignatureOption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("homeDeliveryOptionValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int HomeDeliveryOptionValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("homeDeliveryOptionValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HomeDeliveryOptionValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("homeDeliveryOption")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int HomeDeliveryOption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("collectOnDeliveryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CollectOnDeliveryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("collectOnDeliveryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CollectOnDeliveryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("collectOnDelivery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CollectOnDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("codCollectionType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CodCollectionType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("codTinType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CodTinType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dropOffType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DropOffType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagingType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PackagingType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("holdAtLocationValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HoldAtLocationValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("holdAtLocationValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HoldAtLocationValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("holdAtLocation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? HoldAtLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fedexOneRateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool FedexOneRateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fedexOneRateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool FedexOneRateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fedexOneRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? FedexOneRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hazardClassValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double HazardClassValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hazardClassValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HazardClassValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hazardClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? HazardClass { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("properShippingName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProperShippingName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packingInstructions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PackingInstructions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cargoAircraftOnlyValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CargoAircraftOnlyValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cargoAircraftOnlyValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CargoAircraftOnlyValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cargoAircraftOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CargoAircraftOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dangerousGoodsUom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DangerousGoodsUom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipsWithDryIceValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShipsWithDryIceValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipsWithDryIceValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShipsWithDryIceValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipsWithDryIce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ShipsWithDryIce { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dutiesPaidByAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DutiesPaidByAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UnNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hazmatLimitedQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? HazmatLimitedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("limitedQtyPackingInstructions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LimitedQtyPackingInstructions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hazmatExceptedQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? HazmatExceptedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("technicalName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TechnicalName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alcoholValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AlcoholValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alcoholValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AlcoholValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alcohol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Alcohol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("medicalUseValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool MedicalUseValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("medicalUseValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool MedicalUseValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("medicalUse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? MedicalUse { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ChannelFieldType
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("feedName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string FeedName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("jobName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string JobName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ActiveValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ActiveValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Ref1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Ref2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Ref3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref4")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Ref4 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref5")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Ref5 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef4")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef4 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef5")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef5 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerPackKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomerPackKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityInPackValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int QuantityInPackValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityInPackValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool QuantityInPackValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityInPack")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? QuantityInPack { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ChannelListingType
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("feedName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string FeedName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("jobName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? JobName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priceValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PriceValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priceValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PriceValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemCondition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ItemCondition { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("listingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ListingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saleableValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SaleableValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saleableValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SaleableValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saleable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Saleable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ActiveValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ActiveValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("listingPriceValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ListingPriceValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("listingPriceValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ListingPriceValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("listingPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ListingPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? PackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("syncInventoryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SyncInventoryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("syncInventoryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SyncInventoryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("syncInventory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SyncInventory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("optionValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OptionValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("optionName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OptionName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Ref1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Ref2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Ref3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref4")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Ref4 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ref5")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Ref5 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef4")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef4 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secRef5")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecRef5 { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ContainerType
    {

        [System.Text.Json.Serialization.JsonPropertyName("lpn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Lpn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("number")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trackingNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TrackingNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public DimensionType Dimension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public WeightType Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billingWeightValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double BillingWeightValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billingWeightValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BillingWeightValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billingWeight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? BillingWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipVendor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipVendor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalChargesValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalChargesValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalChargesValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TotalChargesValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCharges")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? TotalCharges { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidIndicatorValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool VoidIndicatorValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidIndicatorValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool VoidIndicatorValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidIndicator")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? VoidIndicator { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<NoteType>? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool NotesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomAttributeType>? CustomAttributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttributesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CustomAttributesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facility")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Facility { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReferenceNumber1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("depthUom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DepthUom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnTrackingNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReturnTrackingNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secondaryType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecondaryType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingLabel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShippingLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingLabelType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShippingLabelType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("masterLpnNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MasterLpnNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CustomAttributeType
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CustomFieldType
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CustomMapType
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class DimensionType
    {

        [System.Text.Json.Serialization.JsonPropertyName("lengthValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double LengthValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lengthValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool LengthValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("length")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Length { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("widthValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double WidthValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("widthValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool WidthValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("width")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Width { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("heightValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double HeightValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("heightValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HeightValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Height { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("volumeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VolumeValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("volumeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool VolumeValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("volume")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Volume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("volumeUom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VolumeUom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("units")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Units { get; set; } = "Inch";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ExtendedEntityType
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ExtendedFieldType>? Field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fieldSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool FieldSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyField")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string KeyField { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string KeyValue { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ExtendedFieldType
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FreightType
    {

        [System.Text.Json.Serialization.JsonPropertyName("termsTypeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TermsTypeValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("termsTypeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TermsTypeValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("termsType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TermsType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Account { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToPartner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BillToPartner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressType BillToAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ItemCustomerType
    {

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ItemNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ItemType Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tradingPartnerCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string TradingPartnerCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buyerPartNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuyerPartNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendorPartNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VendorPartNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerPackageCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ConsumerPackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ean")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Ean { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gtin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Gtin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("upcCaseCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UpcCaseCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nationalDrugCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NationalDrugCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isbn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Isbn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ActiveValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ActiveValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Active { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ItemOptionType
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("optionName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string OptionName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("optionValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string OptionValue { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ItemType
    {

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facility")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Facility { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("number")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("classType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string ClassType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shortDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string ShortDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("longDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string LongDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public DimensionType Dimension { get; set; } = new DimensionType();

        [System.Text.Json.Serialization.JsonPropertyName("itemWeight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public WeightType ItemWeight { get; set; } = new WeightType();

        [System.Text.Json.Serialization.JsonPropertyName("abcCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int AbcCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string ProductCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originCountry")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string OriginCountry { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cycleCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CycleCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tradingPartner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string TradingPartner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseCost")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double PurchaseCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bornOnDateRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool BornOnDateRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool ExpirationDateRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiveDateRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool ReceiveDateRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quarantineRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool QuarantineRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inspectionRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool InspectionRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("catchWeightRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CatchWeightRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hazmat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Hazmat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hazmatCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string HazmatCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("intangibleItemFlag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IntangibleItemFlag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryTrackingEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool InventoryTrackingEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotTrackingEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool LotTrackingEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialTrackingEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool SerialTrackingEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Shippable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchased")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Purchased { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiveOverTolerance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double ReceiveOverTolerance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiveUnderTolerance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double ReceiveUnderTolerance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cycleCountFrequency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int CycleCountFrequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int ReorderQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountingType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccountingType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultLedgerAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DefaultLedgerAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cogsAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CogsAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customFields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomFieldType> CustomFields { get; set; } = new System.Collections.ObjectModel.Collection<CustomFieldType>();

        [System.Text.Json.Serialization.JsonPropertyName("carrierSpecialServices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CarrierSpecialServiceType> CarrierSpecialServices { get; set; } = new System.Collections.ObjectModel.Collection<CarrierSpecialServiceType>();

        [System.Text.Json.Serialization.JsonPropertyName("extendedEntities")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ExtendedEntityType>? ExtendedEntities { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extendedEntitiesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ExtendedEntitiesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ChannelListingType>? Channels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channelsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ChannelsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PackType> Packs { get; set; } = new System.Collections.ObjectModel.Collection<PackType>();

        [System.Text.Json.Serialization.JsonPropertyName("upcs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public UpcCollection Upcs { get; set; } = new UpcCollection();

        [System.Text.Json.Serialization.JsonPropertyName("productCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("styleNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StyleNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("styleName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StyleName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("colorName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ColorName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("colorCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ColorCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("size")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nmfcNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string NmfcNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harmonizedCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string HarmonizedCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mixLots")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool MixLots { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transportationClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TransportationClass { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customMappings")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomMapType> CustomMappings { get; set; } = new System.Collections.ObjectModel.Collection<CustomMapType>();

        [System.Text.Json.Serialization.JsonPropertyName("components")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<KitComponentType> Components { get; set; } = new System.Collections.ObjectModel.Collection<KitComponentType>();

        [System.Text.Json.Serialization.JsonPropertyName("itemVendors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ItemVendorType> ItemVendors { get; set; } = new System.Collections.ObjectModel.Collection<ItemVendorType>();

        [System.Text.Json.Serialization.JsonPropertyName("itemCustomers")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ItemCustomerType>? ItemCustomers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemCustomersSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ItemCustomersSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute4")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute4 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute5")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute5 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uleValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double UleValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uleValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UleValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ule")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Ule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uleUom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UleUom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("kitOrderOnlyValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool KitOrderOnlyValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("kitOrderOnlyValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool KitOrderOnlyValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("kitOrderOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? KitOrderOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("kitStockOnlyValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool KitStockOnlyValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("kitStockOnlyValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool KitStockOnlyValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("kitStockOnly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? KitStockOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly CreatedDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CreatedDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CreatedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly UpdatedDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UpdatedDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? UpdatedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brandName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BrandName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assemblyCostValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double AssemblyCostValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assemblyCostValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AssemblyCostValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assemblyCost")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? AssemblyCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("handlingCostValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double HandlingCostValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("handlingCostValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HandlingCostValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("handlingCost")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? HandlingCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storageCostValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double StorageCostValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storageCostValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool StorageCostValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storageCost")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? StorageCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalImageUrl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExternalImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TaxableValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TaxableValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Taxable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bornOnDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly BornOnDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bornOnDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BornOnDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bornOnDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? BornOnDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assembleToOrderFlagValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AssembleToOrderFlagValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assembleToOrderFlagValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AssembleToOrderFlagValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assembleToOrderFlag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? AssembleToOrderFlag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemOptions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ItemOptionType>? ItemOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemOptionsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ItemOptionsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialCapturePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SerialCapturePoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesEnabledFlagValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SalesEnabledFlagValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesEnabledFlagValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SalesEnabledFlagValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesEnabledFlag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SalesEnabledFlag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int ReorderPoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickStrategy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string PickStrategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("qcPercentValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double QcPercentValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("qcPercentValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool QcPercentValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("qcPercent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? QcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("planItems")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PlanItemType> PlanItems { get; set; } = new System.Collections.ObjectModel.Collection<PlanItemType>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ItemVendorType
    {

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ItemNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ItemType Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shortDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShortDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("longDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LongDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tradingPartnerCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string TradingPartnerCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ReorderQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReorderQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReorderQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderPointValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ReorderPointValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderPointValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReorderPointValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReorderPoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderLeadTimeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ReorderLeadTimeValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderLeadTimeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReorderLeadTimeValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderLeadTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReorderLeadTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCostValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitCostValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCostValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UnitCostValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? UnitCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fulfillmentType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FulfillmentType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPreferredValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPreferredValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPreferredValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPreferredValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPreferred")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsPreferred { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isInventorySyncEnabledValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsInventorySyncEnabledValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isInventorySyncEnabledValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsInventorySyncEnabledValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isInventorySyncEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsInventorySyncEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemSkuUpc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string ItemSkuUpc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalCostValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double AdditionalCostValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalCostValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AdditionalCostValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalCost")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? AdditionalCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int QuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool QuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("importReference1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ImportReference1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("importReference2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ImportReference2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exportReference1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExportReference1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exportReference2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExportReference2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderLotValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ReorderLotValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderLotValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReorderLotValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderLot")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReorderLot { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class KitComponentType
    {

        [System.Text.Json.Serialization.JsonPropertyName("componentItem")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string ComponentItem { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class MultistatusResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("href")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Href { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Entity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("processedDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProcessedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RequestStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warnings")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string>? Warnings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warningsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool WarningsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("errors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string>? Errors { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("errorsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ErrorsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("coHeaderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CoHeaderStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("importReference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ImportReference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<NoticeCollectionNotice>? Notices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noticesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool NoticesSpecified { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class NoteType
    {

        [System.Text.Json.Serialization.JsonPropertyName("source")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Source { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("body")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Body { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Priority { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class NoticeCollectionNotice
    {

        [System.Text.Json.Serialization.JsonPropertyName("entityType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string EntityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entityBk")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string EntityBk { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entityId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string EntityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string FieldName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providedValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string ProvidedValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noticeType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string NoticeType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class OrderLineType
    {

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LineNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerLineNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomerLineNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("importReference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ImportReference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exportReference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExportReference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LineStatus { get; set; } = "New";

        [System.Text.Json.Serialization.JsonPropertyName("coLine")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CoLine { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderPackQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double OrderPackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderPackQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderPackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderPackQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? OrderPackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canceledPackQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double CanceledPackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canceledPackQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CanceledPackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canceledPackQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? CanceledPackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedPackQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ReceivedPackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedPackQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReceivedPackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedPackQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ReceivedPackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDamagedPackQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ReceivedDamagedPackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDamagedPackQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReceivedDamagedPackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDamagedPackQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ReceivedDamagedPackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippedPackQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ShippedPackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippedPackQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShippedPackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippedPackQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ShippedPackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("soldPackQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SoldPackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("soldPackQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SoldPackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("soldPackQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? SoldPackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shortagePackQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ShortagePackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shortagePackQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShortagePackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shortagePackQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ShortagePackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allocatedQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double AllocatedQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allocatedQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AllocatedQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allocatedQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? AllocatedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("importType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ImportType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unallocatedQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnallocatedQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unallocatedQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UnallocatedQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unallocatedQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? UnallocatedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnedPackQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ReturnedPackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnedPackQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReturnedPackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnedPackQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ReturnedPackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickedPackQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PickedPackQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickedPackQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PickedPackQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickedPackQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? PickedPackQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("releasedQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ReleasedQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("releasedQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReleasedQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("releasedQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ReleasedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TaxableTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TaxableTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? TaxableTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TaxableValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TaxableValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Taxable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hardAllocationValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HardAllocationValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hardAllocationValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HardAllocationValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hardAllocation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? HardAllocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double WeightValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool WeightValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightUom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? WeightUom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("platinumLineNoValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PlatinumLineNoValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("platinumLineNoValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PlatinumLineNoValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("platinumLineNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? PlatinumLineNo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("backorderedValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BackorderedValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("backorderedValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BackorderedValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("backordered")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Backordered { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickWave")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PickWave { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("preallocatedValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PreallocatedValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("preallocatedValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PreallocatedValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("preallocated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Preallocated { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dropShipValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DropShipValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dropShipValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DropShipValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dropShip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? DropShip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("crossDockValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CrossDockValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("crossDockValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CrossDockValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("crossDock")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CrossDock { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ItemNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ItemType Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemExternalReference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ItemExternalReference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pack")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public PackType Pack { get; set; } = new PackType();

        [System.Text.Json.Serialization.JsonPropertyName("zoneNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ZoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priceCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PriceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPriceValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPriceValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPriceValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UnitPriceValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingAmountValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ShippingAmountValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingAmountValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShippingAmountValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ShippingAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxCostValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TaxCostValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxCostValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TaxCostValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxCost")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? TaxCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("untaxableTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double UntaxableTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("untaxableTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UntaxableTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("untaxableTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? UntaxableTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double LineTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool LineTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? LineTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCostValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitCostValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCostValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UnitCostValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? UnitCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extendedTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ExtendedTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extendedTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ExtendedTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extendedTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ExtendedTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmountValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountAmountValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmountValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DiscountAmountValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("catchWeightValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double CatchWeightValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("catchWeightValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CatchWeightValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("catchWeight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? CatchWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SerialNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Invoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sortOrderValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int SortOrderValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sortOrderValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SortOrderValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sortOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? SortOrder { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTimeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly CreatedDateTimeValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTimeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CreatedDateTimeValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CreatedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedDateTimeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly UpdatedDateTimeValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedDateTimeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UpdatedDateTimeValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedDateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? UpdatedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UpdatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inboundLpn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InboundLpn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("masterInboundLpn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MasterInboundLpn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LotNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipFrom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customFields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomFieldType>? CustomFields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customFieldsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CustomFieldsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("carrierSpecialServices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CarrierSpecialServiceType>? CarrierSpecialServices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("carrierSpecialServicesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CarrierSpecialServicesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extendedEntities")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ExtendedEntityType>? ExtendedEntities { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extendedEntitiesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ExtendedEntitiesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ChannelFieldType>? Channels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channelsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ChannelsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<NoteType>? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool NotesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customMappings")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomMapType> CustomMappings { get; set; } = new System.Collections.ObjectModel.Collection<CustomMapType>();

        [System.Text.Json.Serialization.JsonPropertyName("receiptLines")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ReceiptLineType>? ReceiptLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptLinesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReceiptLinesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipToAddressNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipToAddressNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipToAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressType ShipToAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryCondition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryCondition { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute4")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute4 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute5")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute5 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute6")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute6 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute7")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute7 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedArrivalDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly PlannedArrivalDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedArrivalDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PlannedArrivalDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedArrivalDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlannedArrivalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedShipDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly PlannedShipDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedShipDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PlannedShipDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedShipDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlannedShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ExpirationDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ExpirationDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cartonizedContainers")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ContainerType>? CartonizedContainers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cartonizedContainersSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CartonizedContainersSpecified { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class OrderType
    {

        [System.Text.Json.Serialization.JsonPropertyName("persistableValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PersistableValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("persistableValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PersistableValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("persistable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Persistable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facility")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Facility { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("zoneNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ZoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IdValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IdValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("number")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderPriority")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long OrderPriority { get; set; } = 1000L;

        [System.Text.Json.Serialization.JsonPropertyName("otherReferenceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OtherReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("importReference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ImportReference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("integrationSourceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? IntegrationSourceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipFromAddressNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipFromAddressNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipFromAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressType ShipFromAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipToAddressNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipToAddressNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipToAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressType ShipToAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToAddressNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BillToAddressNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToAccountNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BillToAccountNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressType BillToAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("freight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public FreightType Freight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipVendor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipVendor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipVia")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipVia { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnShipVia")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReturnShipVia { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnShipOption")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReturnShipOption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dropShipValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DropShipValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dropShipValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DropShipValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dropShip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? DropShip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderSource")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderSource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secondaryOrderSource")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SecondaryOrderSource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("seller")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Seller { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buyer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Buyer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperPartner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipperPartner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tradingPartner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TradingPartner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tradingPartnerSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TradingPartnerSite { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToPartner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BillToPartner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Customer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerOrderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomerOrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipToEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipToEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderSummary")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderSummary { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderSubTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double OrderSubTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderSubTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderSubTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderSubTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? OrderSubTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderTaxableTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double OrderTaxableTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderTaxableTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderTaxableTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderTaxableTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? OrderTaxableTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderUntaxableTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double OrderUntaxableTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderUntaxableTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderUntaxableTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderUntaxableTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? OrderUntaxableTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderShipTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double OrderShipTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderShipTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderShipTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderShipTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? OrderShipTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderShippingTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double OrderShippingTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderShippingTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderShippingTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderShippingTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? OrderShippingTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TaxableValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TaxableValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Taxable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderTaxTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double OrderTaxTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderTaxTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderTaxTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderTaxTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? OrderTaxTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingTaxTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double ShippingTaxTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingTaxTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShippingTaxTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingTaxTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ShippingTaxTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderTotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double OrderTotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderTotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderTotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? OrderTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hubId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? HubId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute4")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute4 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute5")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute5 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute6")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute6 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute7")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute7 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("relatedOrderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RelatedOrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTimeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly CreatedDateTimeValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTimeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CreatedDateTimeValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CreatedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedDateTimeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly UpdatedDateTimeValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedDateTimeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UpdatedDateTimeValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedDateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? UpdatedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updatedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UpdatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<NoteType>? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool NotesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customFields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomFieldType>? CustomFields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customFieldsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CustomFieldsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("carrierSpecialServices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CarrierSpecialServiceType>? CarrierSpecialServices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("carrierSpecialServicesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CarrierSpecialServicesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extendedEntities")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ExtendedEntityType>? ExtendedEntities { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extendedEntitiesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ExtendedEntitiesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ChannelFieldType>? Channels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channelsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ChannelsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderLines")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<OrderLineType>? OrderLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderLinesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderLinesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<PaymentType>? Payments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PaymentsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrencyCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("coHeader")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CoHeader { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentOrderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ParentOrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentOrderType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ParentOrderType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customMappings")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomMapType> CustomMappings { get; set; } = new System.Collections.ObjectModel.Collection<CustomMapType>();

        [System.Text.Json.Serialization.JsonPropertyName("otherReferenceNumber2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OtherReferenceNumber2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDiscountSubtotalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double OrderDiscountSubtotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDiscountSubtotalValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OrderDiscountSubtotalValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDiscountSubtotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? OrderDiscountSubtotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("partnerInvoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PartnerInvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contractNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContractNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("importType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ImportType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryConfirmation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DeliveryConfirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invSegmentPlanCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvSegmentPlanCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("placedDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly PlacedDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("placedDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PlacedDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("placedDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlacedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedArrivalDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly PlannedArrivalDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedArrivalDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PlannedArrivalDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedArrivalDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlannedArrivalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedReleaseDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly PlannedReleaseDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedReleaseDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PlannedReleaseDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedReleaseDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlannedReleaseDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedShipDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly PlannedShipDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedShipDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PlannedShipDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedShipDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlannedShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualShipDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualShipDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualShipDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ActualShipDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualShipDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelByArrivalDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly CancelByArrivalDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelByArrivalDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CancelByArrivalDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelByArrivalDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CancelByArrivalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelByReleaseDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly CancelByReleaseDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelByReleaseDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CancelByReleaseDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelByReleaseDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CancelByReleaseDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelByShipDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly CancelByShipDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelByShipDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CancelByShipDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelByShipDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CancelByShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("earliestShipDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly EarliestShipDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("earliestShipDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool EarliestShipDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("earliestShipDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EarliestShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("earliestDeliveryDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly EarliestDeliveryDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("earliestDeliveryDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool EarliestDeliveryDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("earliestDeliveryDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EarliestDeliveryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualArrivalDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ActualArrivalDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualArrivalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingStatusValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ShippingStatusValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingStatusValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ShippingStatusValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ShippingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendAsnValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int SendAsnValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendAsnValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SendAsnValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendAsn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? SendAsn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dutyPaidBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DutyPaidBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residentialDeliveryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ResidentialDeliveryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residentialDeliveryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ResidentialDeliveryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residentialDelivery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ResidentialDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("homeDeliveryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HomeDeliveryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("homeDeliveryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HomeDeliveryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("homeDelivery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? HomeDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceRequiredValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool InsuranceRequiredValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceRequiredValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool InsuranceRequiredValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? InsuranceRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnRequiredValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReturnRequiredValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnRequiredValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReturnRequiredValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ReturnRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("incotermsType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? IncotermsType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayDeliveryValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SaturdayDeliveryValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayDeliveryValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SaturdayDeliveryValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayDelivery")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SaturdayDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notificationCode1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NotificationCode1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notificationCode2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NotificationCode2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notificationCode3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NotificationCode3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShipTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saleConditionCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SaleConditionCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("termsTypePortOrPlace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TermsTypePortOrPlace { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("onTimeValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OnTimeValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("onTimeValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OnTimeValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("onTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? OnTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("verbalConfirmationName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VerbalConfirmationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("verbalConfirmationPhoneNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VerbalConfirmationPhoneNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PackType
    {

        [System.Text.Json.Serialization.JsonPropertyName("itemNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ItemNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double WeightValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool WeightValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightUom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? WeightUom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("boxTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<BoxTypeType>? BoxTypes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("boxTypesSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BoxTypesSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public DimensionType Dimension { get; set; } = new DimensionType();

        [System.Text.Json.Serialization.JsonPropertyName("upcs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public UpcCollection Upcs { get; set; } = new UpcCollection();

        [System.Text.Json.Serialization.JsonPropertyName("newPackFlagValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool NewPackFlagValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newPackFlagValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool NewPackFlagValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newPackFlag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NewPackFlag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lpnTrackingEnabledValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool LpnTrackingEnabledValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lpnTrackingEnabledValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool LpnTrackingEnabledValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lpnTrackingEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LpnTrackingEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("readyToShipValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ReadyToShipValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("readyToShipValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReadyToShipValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("readyToShip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReadyToShip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customMappings")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomMapType> CustomMappings { get; set; } = new System.Collections.ObjectModel.Collection<CustomMapType>();

        [System.Text.Json.Serialization.JsonPropertyName("cartonGroup")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CartonGroup { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("preferredCartonType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PreferredCartonType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PaymentDetailType
    {

        [System.Text.Json.Serialization.JsonPropertyName("creditValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CreditValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CreditValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Credit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastFour")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LastFour { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorizedValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AuthorizedValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorizedValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AuthorizedValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorized")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Authorized { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("historyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? HistoryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AuthCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalData")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AdditionalData { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salePostedValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SalePostedValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salePostedValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SalePostedValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salePosted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SalePosted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("emvData")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? EmvData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PaymentType
    {

        [System.Text.Json.Serialization.JsonPropertyName("idValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IdValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IdValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("number")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gateway")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Gateway { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("order")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Order { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("store")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Store { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TransType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float Changes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float Shipping { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float Tax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cityTax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float CityTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float Discount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cardType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CardType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("txType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TxType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("txNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TxNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly CreatedDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CreatedDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CreatedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("detail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PaymentDetailType Detail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ChannelFieldType>? Channels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channelsSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ChannelsSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channelSource")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ChannelSource { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PlanItemType
    {

        [System.Text.Json.Serialization.JsonPropertyName("tradingPartner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TradingPartner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facility")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Facility { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int ReorderQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int ReorderPoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderLeadTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int ReorderLeadTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("safetyStock")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int SafetyStock { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rounding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Rounding { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderCycle")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int OrderCycle { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minVendorOrderQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int MinVendorOrderQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("autoReorderPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool AutoReorderPoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("autoPreferredSafetyStock")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool AutoPreferredSafetyStock { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("autoReorderLeadTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool AutoReorderLeadTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("makeOrBuy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool MakeOrBuy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ReceiptLineType
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderType { get; set; } = "Purchase Order";

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string LineNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("number")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string ItemNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PackType { get; set; } = "Each";

        [System.Text.Json.Serialization.JsonPropertyName("packQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PackQty { get; set; } = 1;

        [System.Text.Json.Serialization.JsonPropertyName("receivingFacility")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReceivingFacility { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivingLocation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReceivingLocation { get; set; } = "Receiving";

        [System.Text.Json.Serialization.JsonPropertyName("receivingContainer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReceivingContainer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivingContainerType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReceivingContainerType { get; set; } = "Pallet";

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ReceivedDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReceivedDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ReceivedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPriceValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPriceValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPriceValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UnitPriceValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LotNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("disposition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Disposition { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SerialNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bornOnDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly BornOnDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bornOnDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BornOnDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bornOnDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? BornOnDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ExpirationDateValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ExpirationDateValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("catchWeightValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double CatchWeightValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("catchWeightValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CatchWeightValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("catchWeight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? CatchWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("damagedValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DamagedValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("damagedValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DamagedValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("damaged")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Damaged { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("damagedQuantityValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DamagedQuantityValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("damagedQuantityValueSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool DamagedQuantityValueSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("damagedQuantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? DamagedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createInventory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CreateInventory { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("createPo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CreatePo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createItem")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CreateItem { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherReferenceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OtherReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ParentNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oldItemNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OldItemNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customAttribute3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomAttribute3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryCondition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryCondition { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute4")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute4 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute5")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute5 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute6")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute6 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryAttribute7")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InventoryAttribute7 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ChannelFieldType> Channels { get; set; } = new System.Collections.ObjectModel.Collection<ChannelFieldType>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UpcCollection
    {

        [System.Text.Json.Serialization.JsonPropertyName("upc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string>? Upc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("upcSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UpcSpecified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("source")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Source { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UserCollection
    {

        [System.Text.Json.Serialization.JsonPropertyName("user")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<UserType?>? User { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userSpecified")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UserSpecified { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UserType
    {

        [System.Text.Json.Serialization.JsonPropertyName("username")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string LastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("businessUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BusinessUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facility")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Facility { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("organization")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Organization { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("handheldMenu")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? HandheldMenu { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("employeeNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? EmployeeNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("department")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Department { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("division")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Division { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("zip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Zip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("timeZone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TimeZone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("language")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Language { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Mobile { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Fax { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class WeightType
    {

        [System.Text.Json.Serialization.JsonPropertyName("weight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("units")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Units { get; set; } = "Pound";

    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class DeposcoResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public DeposcoResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class DeposcoResponse<TResult> : DeposcoResponse
    {
        public TResult Result { get; private set; }

        public DeposcoResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604